{
    "collab_server" : "",
    "contents" : "#' @title validation\n#' @description Create Validation pdf from MAgPIE output and corresponding validation.mif\n#' \n#' @export\n#'\n#' @param gdx GDX file\n#' @param hist  Validation data.All formats allowed which can be converted to quitte (including characters containing the path to a mif file)\n#' @param file a file name the output pdf\n#' @param runinfo (optional) Rdata object with run information\n#' @param debug Switch to activate or deactivate debug mode\n#' @param reportfile file name to which a backup of the magpie reporting should be written (file ending should be \".mif\"). No report written if set to NULL.\n#' @param ... additional arguments supplied to the validationpdf function\n#' @author Jan Philipp Dietrich\n#' @examples\n#' \n#'   \\dontrun{\n#'     validation(\"fulldata.gdx\",\"validation.mif\",filter=\"Yield\")\n#'   }\n#' \n#' @importFrom mip validationpdf\n#' @importFrom lusweave swopen swlatex swclose swR swtable swfigure\n#' @importFrom luplot plotcountrymap\n#' @importFrom mip plotstyle\n#' @importFrom utils capture.output\n#' @importFrom magclass write.report2\n\nvalidation <- function(gdx,hist,file=\"validation.pdf\",runinfo=NULL,debug=FALSE, reportfile=NULL, ...) {\n\n  template <-  c(\"\\\\documentclass[a4paper, portrait ]{article}\",\n                 \"\\\\setlength{\\\\parindent}{0in}\",\n                 \"\\\\usepackage{float}\",\n                 \"\\\\usepackage[bookmarksopenlevel=section]{hyperref}\",\n                 \"\\\\hypersetup{bookmarks=true,pdfauthor={PIK Landuse group}}\",\n                 \"\\\\usepackage{graphicx}\",\n                 \"\\\\usepackage{rotating}\",\n                 \"\\\\usepackage[strings]{underscore}\",\n                 \"\\\\usepackage[margin=2cm]{geometry}\",\n                 \"\\\\usepackage{fancyhdr}\",\n                 \"\\\\pagestyle{fancy}\",\n                 \"\\\\begin{document}\",\n                 \"<<echo=false>>=\",\n                 \"options(width=90)\",\n                 \"@\") \n  \n  sw <- swopen(outfile = file, template = template)\n  swlatex(sw,c(\"\\\\title{MAgPIE run analysis}\",\"\\\\author{Aperture Science Enrichment Center}\",\"\\\\maketitle\",\"\\\\tableofcontents\"))\n  on.exit(swclose(sw, clean_output=!debug, engine=\"knitr\"))\n  \n  \n  #Warnings\n  if(!is.null(runinfo)) {\n    validation <- list(technical=list())\n    load(runinfo)\n    #########Warnings##############\n    if(!is.null(validation$technical$last.warning)) {\n      swlatex(sw,\"\\\\part{Warnings}\")\n      swR(sw,\"structure\",validation$technical$last.warning, class = \"warnings\")\n    }\n  }\n \n  swlatex(sw,\"\\\\part{Basics}\")\n  \n  #########Region map############## \n  swlatex(sw,\"\\\\subsection{World regions}\")\n  i2iso <- readGDX(gdx,\"i_to_iso\", react=\"silent\")\n  if(!is.null(i2iso)) {\n    map <- as.magpie(i2iso[2:1],spatial=1)\n    col <- plotstyle(levels(as.factor(i2iso[[1]])))\n    tmpplot <- function(...)  {\n      a <- capture.output(plotcountrymap(...))\n    }\n    swfigure(sw,tmpplot,map,colourPalette=col,catMethod = \"categorical\", mapTitle=\"\", fig.orientation=\"landscape\")\n  } else {\n    swlatex(sw,\"Could not find mapping between countries and regions in gdx file!\")  \n  }\n  \n  #########Modelstat and goal function value##############\n  swlatex(sw,\"\\\\subsection{Modelstat}\")\n  #Modelstat\n  modstat<-modelstat(gdx)\n  if(!is.null(modstat)) {\n    swtable(sw,modstat,table.placement=\"H\",caption.placement=\"top\",transpose=TRUE,caption=\"main\",vert.lines=1,align=\"c\")\n  } else {\n    swlatex(sw,\"Could not find modelstat in gdx file!\")    \n  }\n  #global costs in billion USD\n  swlatex(sw,\"\\\\subsection{Goal function value}\")\n  costs <- costs(gdx,level = \"glo\")\n  if(!is.null(costs)) {\n    costs_glo<-setNames(costs/1000,\"Global costs (billion USD)\")\n    swtable(sw,costs_glo,table.placement=\"H\",caption.placement=\"top\",transpose=TRUE,caption=\"Global costs (billion USD)\",vert.lines=1,align=\"c\")\n  } else {\n    swlatex(sw,\"Could not find goal function value in gdx file!\")   \n  }\n  \n  ###################Validation output################################  \n  x <- getReport(gdx)\n  if(!is.null(reportfile)) write.report2(x,reportfile)\n  validationpdf(x,hist=hist,file=sw,debug=debug,prefix=\"\",...)\n  \n  \n  ################Additional run information#########################\n  swlatex(sw,\"\\\\part{Run Information}\")\n  \n  swlatex(sw,\"\\\\section{Calibration}\")\n  \n  #########yield calib factor##############\n  swlatex(sw,\"\\\\subsection{Yield calibration factors}\")\n  calib_factor<-readGDX(gdx, \"f14_yld_calib\", format=\"first_found\", react=\"silent\")\n  if(!is.null(calib_factor)) {\n    dimnames(calib_factor)[[3]]<-c(\"crops\",\"pasture\")\n    swtable(sw,calib_factor[,1,],table.placement=\"H\",include.rownames=TRUE,transpose=TRUE,vert.lines=1,align=\"c\",hor.lines=1)\n  } else {\n    swlatex(sw,\"Could not find calibration factors in gdx file!\")   \n  }\n\n  #########Land use change cropland 1995##############\n  swlatex(sw,\"\\\\subsection{Land use change in 1995 (reshuffling)}\")\n  land <- land(gdx,level=\"cell\",sum=FALSE)\n  croparea <- croparea(gdx,level=\"regglo\",water_aggr=TRUE)\n  if(!is.null(land) & !is.null(croparea)) {\n    land <- land[,\"y1995\",]\n    land_start <- readGDX(gdx,\"pm_land_start\", format=\"first_found\")[,,getNames(land)]\n    if(dim(land_start)[3] == 12) land_start <- dimSums(land_start,dim=3.2)\n    dimnames(land_start)[[2]]<-\"y1995\"\n    diff <- land - land_start\n  \n    contraction <- superAggregate((diff < 0) * diff,level=\"regglo\",aggr_type=\"sum\")\n    expansion   <- superAggregate((diff > 0) * diff,level=\"regglo\",aggr_type=\"sum\")\n  \n    land <- superAggregate(land,level=\"regglo\",aggr_type=\"sum\")\n    land_start <- superAggregate(land_start,level=\"regglo\",aggr_type=\"sum\")\n  \n\n    getNames(croparea) <- \"crop\"\n  \n    expansion_crop <- setNames(expansion[,,\"crop\"],\"expansion\")\n    contraction_crop <- setNames(contraction[,,\"crop\"],\"contraction\")\n    net_changes <- setNames(land[,,\"crop\"] - land_start[,,\"crop\"], \"net changes\")\n    gross_changes <- setNames(abs(expansion_crop)+setNames(abs(contraction_crop),NULL), \"gross changes\")\n  \n    all<-mbind(expansion_crop,contraction_crop,net_changes,gross_changes)\n    swtable(sw,all[,\"y1995\",],transpose=TRUE,caption.placement=\"top\",caption=\"Land use change cropland 1995 (Mio. ha)\",table.placement=\"H\",vert.lines=1,align=\"r\",hor.lines=1)\n  } else {\n    swlatex(sw,\"Could not find required data in gdx file to calculate reshuffling in 1995!\")   \n  }\n  \n  if(!is.null(runinfo)) {\n    load(runinfo)\n    swlatex(sw,\"\\\\section{Model settings}\")\n    \n    #########Model version##############\n    if(!is.null(validation$technical$model_setup)) { \n      swlatex(sw,\"\\\\subsection{Code settings}\")\n      model_setup<-validation$technical$model_setup\n      swR(sw,\"cat\",model_setup,sep='\\n',fill=TRUE)\n    }\n    #########Input dataset##############\n    if(!is.null(validation$technical$input_data)) { \n      swlatex(sw,\"\\\\subsection{Dataset}\")\n      input_data<-validation$technical$input_data\n      swR(sw,\"cat\",input_data,sep='\\n',fill=TRUE)\n    }\n    #########Module Interfaces##############\n    if(!is.null(validation$technical$modules)) { \n      swlatex(sw,\"\\\\subsection{Module Interfaces}\")\n      swR(sw,print,validation$technical$modules)\n    }\n    \n    #########R Informations##############\n    if(!is.null(validation$technical$setup_info)) { \n      swlatex(sw,\"\\\\subsection{R Information}\")\n      for(n in names(validation$technical$setup_info)) {\n        swlatex(sw,paste0(\"\\\\paragraph{\",n,\"}\"))\n        swR(sw,print,validation$technical$setup_info[[n]]$sessionInfo)\n        swR(sw,print,validation$technical$setup_info[[n]]$libPaths)\n        swR(sw,print,validation$technical$setup_info[[n]]$installedpackages[,\"Version\"])\n      }\n    }\n    \n    \n    #########Runtime information##############\n    swlatex(sw,\"\\\\section{Runtime information}\")\n    runtime<-NULL\n    for(d in c(lapply(validation$technical$time,as.numeric,units=\"hours\"),recursive=TRUE)) {\n      runtime <- c(runtime,paste(format(floor(d),width=2),'h ',\n                                 format(floor((d-floor(d))*60),width=2),'m ',\n                                 format(round(((d-floor(d))*60-floor((d-floor(d))*60))*60),width=2),'s',\n                                 sep=''))\n    }\n    names(runtime) <- names(validation$technical$time)\n    tmp <- NULL\n    for(i in 1:length(runtime)) {\n      runtime[i] <- paste(format(names(runtime[i]),width=20),': ',runtime[i],sep='')\n    }\n    swR(sw,\"cat\",runtime,sep='\\n',fill=TRUE)\n  }  \n  \n}\n",
    "created" : 1497441874224.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3140498135",
    "id" : "B9B1A438",
    "lastKnownWriteTime" : 1497361397,
    "last_content_update" : 1497361397,
    "path" : "~/Landuselibrary/magpie4/R/validation.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}