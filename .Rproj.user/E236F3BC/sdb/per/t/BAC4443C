{
    "collab_server" : "",
    "contents" : "#' Create a validation PDF file\n#' \n#' @param x     Data to be validated. All formats allowed which can be converted to quitte (including characters containing the path to a mif file)\n#' @param hist  Validation data.All formats allowed which can be converted to quitte (including characters containing the path to a mif file)\n#' @param file file name of the output PDF or a Sweave object. If a sweave object is provided the function will return the updated object, otherwise\n#' it will write its content to the file\n#' @param style data style for the returned data. Currently available: \"trafficlight\", \"detailed\", \"comparison\"\n#' @param only_historical boolean deciding whether only historical data should be used for validation or also projections from other sources\n#' @param digits integer indicating the number of digits to be shown.\n#' @param filter Additional filter to be applied on the data to only plot a subset of the provided data\n#' @param prefix Prefix which will be put in front of each part title (useful if validation is integrated into a bigger document)\n#' @param debug Switch to activate or deactivate debug mode\n#' @author Jan Philipp Dietrich\n#' @importFrom magclass as.magpie ndata dimSums nyears getRegions getNames nregions\n#' @importFrom quitte as.quitte getRegs\n#' @importFrom lusweave swopen swclose swfigure swR swtable swlatex\n#' @importFrom trafficlight trafficlight\n#' @importFrom reshape2 melt\n#' @export\n#' \n\nvalidationpdf <- function(x,hist,file=\"validation.pdf\",style=\"comparison\", only_historical=FALSE, digits=3, filter=NULL, prefix=NULL, debug=FALSE) {\n  styles <- c(\"trafficlight\",\"comparison\",\"detailed\")\n  if(!(style %in% styles)) stop(\"Unknown style \\\"\",style,\"\\\", please use one of the following: \",paste(styles,collapse=\", \"))\n  x <- as.quitte(x)\n  if(!is.null(hist)) {\n    hist <- as.quitte(hist)\n    # strip down NAs\n    hist <- hist[!is.na(hist$value),]\n  }\n  \n  #rename \"World\" in GLO\n  .tmp <- function(x) {\n    if(is.factor(x)) {\n      if(\"World\" %in% levels(x)) levels(x)[levels(x)==\"World\"] <- \"GLO\"\n    } else {\n      w <- which(x==\"World\")\n      if(length(w)>0) x[w] <- \"GLO\"\n    }\n    return(x)\n  }\n  x$region <- .tmp(x$region)\n  hist$region <- .tmp(hist$region)\n  \n  if(all(is.na(x$scenario))) x$scenario <- \"default\"\n  \n  tmp <- function(filter,x) {\n    if(is.null(filter)) return(TRUE)\n    else return(grepl(filter,x))\n  }\n  \n  #filter data\n  x <- droplevels(x[!is.na(x$value) & tmp(filter,x$variable),])\n  hist <- droplevels(hist[!is.na(hist$value) &  tmp(filter,hist$variable),])\n  if(only_historical)  hist <- droplevels(hist[hist$scenario==\"historical\",])\n  \n  if(dim(x)[1]==0) stop(\"No data remaining to be validated after all filter have been applied!\")\n  if(dim(hist)[1]==0) stop(\"No validation data remaining after all filter have been applied!\")\n  \n  x$fullname    <- paste0(x$variable, \" (\",x$unit,\")\")\n  hist$fullname <- paste0(hist$variable, \" (\",hist$unit,\")\")\n  \n  vars     <- intersect(x$fullname,hist$fullname)\n  xtrax    <- setdiff(x$fullname,hist$fullname)\n  xtrahist <- setdiff(hist$fullname,x$fullname)\n \n  remove_symbols <- function(x) return(gsub(\"(\\\\++|\\\\-+)\\\\|\",\"\", x))\n  extract_symbols <- function(x) return(gsub(\"(\\\\+|\\\\-)\\\\|\",\"\\\\1\",gsub(\"[^\\\\|^\\\\+^\\\\-]*\",\"\",x)))\n  \n  x$fullname    <- as.factor(remove_symbols(x$fullname))\n  hist$fullname <- as.factor(remove_symbols(hist$fullname))\n  \n  x$variable    <- remove_symbols(x$variable)\n  hist$variable <- remove_symbols(hist$variable)\n \n  splitvars <- function(vars, nlevel=4) {\n    properties <- extract_symbols(vars)\n    fullname   <- remove_symbols(vars)\n    unit <- sub(\"^.* \\\\(([^\\\\)]*)\\\\)$\",\"\\\\1\",fullname)\n    vars <- sub(\"^(.*) \\\\(([^\\\\)]*)\\\\)$\",\"\\\\1\",fullname)\n    .split <- function(vars, ignore_rest=FALSE) {\n      out <- vars\n      tmp <- vars\n      for(i in 1:(nlevel-1)) {\n        out <- cbind(out,sub(\"\\\\|.*$\",\"\",tmp))\n        tmp <- sub(\"^[^\\\\|]*(\\\\||$)\",\"\",tmp)\n      }\n      if(ignore_rest) tmp <- sub(\"\\\\|.*$\",\"\",tmp)\n      return(cbind(out,tmp))\n    }\n    out <- cbind(fullname, unit, .split(vars), .split(properties,TRUE))\n    out <- as.data.frame(out)\n    names(out) <- c(\"fullname\",\"unit\",\"name\",paste0(\"level\",1:nlevel),\"props\",paste0(\"prop\",1:nlevel))\n    return(out)\n  }\n  vars <- splitvars(vars, nlevel=4)\n  \n  calc_digits <- function(tmpx,digits) {\n    d <- max(0,-1*ceiling(log10(max(tmpx)))+digits)\n    if(is.finite(d) & is.numeric(d)) return(d)\n    return(0)\n  }\n  \n  prepmagpie <- function(x,hist) {\n    tmpsort <- function(x){\n      reg <- sort(getRegions(x))\n      if(\"GLO\" %in% reg) reg <- c(\"GLO\",reg[reg!=\"GLO\"])\n      return(x[reg,,])\n    }\n    tmpx <- tmpsort(as.magpie(as.quitte(x)))\n    tmphist <- tmpsort(as.magpie(as.quitte(hist)))\n    regs <- intersect(getRegions(tmpx),getRegions(tmphist))\n    return(list(x=tmpx[regs,,],hist=tmphist[regs,,]))      \n  }\n  \n  preptitle <- function(x) {\n    # put unit in brackets\n    x <- sub(\"\\\\.([^\\\\.]*)$\",\" (\\\\1)\",x)\n    # combine model and scenario\n    x <- sub(\".\", \" \", x, fixed=TRUE)\n    # remove scenario name if it is \"historical\"\n    x <- sub(\" historical\", \"\", x, fixed=TRUE)\n    # replace remaining .-separators\n    x <- gsub(\".\", \" | \", x, fixed=TRUE)\n    return(x)\n  }\n  \n  histtables <- function(sw, m, digits) {\n    dimnames(m$x)[[2]] <- sub(\"y\",\"\",dimnames(m$x)[[2]])\n    for(s in 1:ndata(m$x)) {\n      swlatex(sw,\"\\\\hspace{10 mm}\")\n      swtable(sw,m$x[,,s],preptitle(getNames(m$x)[s]), digits=calc_digits(m$x,digits), vert.lines = 0, align=\"r\", table.placement=\"H\")\n    }\n    if(any(grepl(\".historical.\",getNames(m$hist),fixed=TRUE))) {\n      m$hist <- m$hist[,,\"historical\"]\n      for(i in 1:ndata(m$hist)) {\n        mhist2 <- m$hist[,,i]\n        #remove NAs\n        mhist2 <- mhist2[,dimSums(!is.na(mhist2),dim=c(1,3))!=0,]\n        if(nyears(mhist2)>10) mhist2 <- mhist2[,(-9:0)+nyears(mhist2),]\n        if(nyears(mhist2)>0) {\n          swlatex(sw,\"\\\\hspace{10 mm}\")\n          dimnames(mhist2)[[2]] <- sub(\"y\",\"\",dimnames(mhist2)[[2]])\n          swtable(sw,mhist2, preptitle(getNames(m$hist)[i]), digits=calc_digits(mhist2,digits), vert.lines = 0, align=\"r\", table.placement=\"H\")\n        }\n      }\n    }\n  }\n  \n  styleTrafficlight <- function(sw, x, hist, stats) {\n    m <- prepmagpie(x,hist)\n    p <- trafficlight(m$x,m$hist, detailed=FALSE)\n    stats$trafficlight <- rbind(stats$trafficlight,melt(attr(p,\"data\")))\n    swfigure(sw,print,p, sw_option=\"width=10,height=2\")\n    return(stats)\n  }\n  \n  styleDetailed <- function(sw, x, hist, varname, stats) {\n    m <- prepmagpie(x,hist)\n    name <- paste0(sub(\"^.*\\\\|\",\"\",varname[\"name\"]), \" (\",x$unit[[1]],\")\")\n    if(\"GLO\" %in% intersect(getRegs(x),getRegs(hist))) swfigure(sw,mipLineHistorical,x[x$region==\"GLO\",],hist[hist$region==\"GLO\",], ylab=name)\n    regs <- setdiff(intersect(getRegs(x),getRegs(hist)),\"GLO\")\n    if(length(regs)>0) swfigure(sw,mipLineHistorical,x[x$region %in% regs,],hist[hist$region %in% regs,], ylab=name, facet.dim = \"region\", size=12)\n    p <- trafficlight(m$x,m$hist)\n    stats$trafficlight <- rbind(stats$trafficlight,melt(attr(p,\"data\")))\n    swfigure(sw,print,p, sw_option=\"width=8,height=11\")\n    histtables(sw,m,digits)\n    return(stats)\n  }\n  \n  styleComparison <- function(sw, x, hist, varname, stats, debug) {\n    m <- prepmagpie(x,hist)\n    name <- paste0(sub(\"^.*\\\\|\",\"\",varname[\"name\"]), \" (\",x$unit[[1]],\")\")\n    if(\"GLO\" %in% intersect(getRegs(x),getRegs(hist))) swfigure(sw,mipLineHistorical,x[x$region==\"GLO\",],hist[hist$region==\"GLO\",], ylab=name)\n    regs <- setdiff(intersect(getRegs(x),getRegs(hist)),\"GLO\")\n    if(length(regs)>0) swfigure(sw,mipLineHistorical,x[x$region %in% regs,],hist[hist$region %in% regs,], ylab=name, facet.dim = \"region\", size=12)\n    for(s in 1:ndata(m$x)) {\n      x <- m$x[,,s]\n      xc <- m$hist\n      if(debug) save(x,xc,file = paste0(varname[\"name\"],s,\".Rda\"))\n      p <- trafficlight(m$x[,,s],m$hist, detailed=(nregions(m$x)<2))\n      stats$trafficlight <- rbind(stats$trafficlight,melt(attr(p,\"data\")))\n      swfigure(sw,print,p, tex_caption=preptitle(getNames(m$x)[s]), sw_option=\"width=10,height=2\")\n    }\n    histtables(sw,m,digits)\n    return(stats)\n  }\n  \n  hascontent <- function(stats, ...) {\n    test <- list(...)\n    hascontent <- TRUE\n    for(n in names(test)) {\n      if(all(test[[n]]$value==0, na.rm=TRUE)) {\n        if(is.null(stats$ignored_all0)) stats$ignored_all0 <- list()\n        stats$ignored_all0[[n]] <- c(stats$ignored_all0[[n]],levels(droplevels(test[[n]]$fullname))) \n        hascontent <- FALSE  \n      }\n    }\n    stats$hascontent <- hascontent\n    return(stats)\n  }\n  \n  \n  fillcontent <- function(sw, x, hist, varname, style, stats) {\n    stats <- hascontent(stats,x=x,hist=hist)\n    if(!stats$hascontent) return(stats)\n\n    x$fullname <- NULL\n    hist$fullname <- NULL\n    \n    if(varname[\"level4\"]!=\"\") {\n      cat(\"      ...\",varname[\"level4\"],\"\\n\")\n      swlatex(sw,paste0(\"\\\\subsubsection{\",varname[\"level4\"],\"}\"))\n    }  \n    if(style==\"trafficlight\") {\n      stats <- styleTrafficlight(sw, x, hist, stats)\n    } else if(style==\"comparison\") {\n      stats <- styleComparison(sw, x, hist, varname, stats, debug) \n    } else if(style==\"detailed\") {\n      stats <- styleDetailed(sw, x, hist, varname, stats) \n    } else {\n      stop(\"Unknown style \",style)\n    }           \n    return(stats) \n  }\n  \n  template <-  c(\"\\\\documentclass[a4paper, portrait ]{article}\",\n                 \"\\\\setlength{\\\\parindent}{0in}\",\n                 \"\\\\usepackage{float}\",\n                 \"\\\\usepackage[bookmarksopenlevel=section]{hyperref}\",\n                 \"\\\\hypersetup{bookmarks=true,pdfauthor={PIK Landuse group}}\",\n                 \"\\\\usepackage{graphicx}\",\n                 \"\\\\usepackage{rotating}\",\n                 \"\\\\usepackage[strings]{underscore}\",\n                 \"\\\\usepackage[margin=2cm]{geometry}\",\n                 \"\\\\usepackage{fancyhdr}\",\n                 \"\\\\pagestyle{fancy}\",\n                 \"\\\\begin{document}\",\n                 \"<<echo=false>>=\",\n                 \"options(width=110)\",\n                 \"@\") \n  \n  cat(\"Start preparing data...\\n\")\n  if(is.environment(file)) {\n    sw <- file\n  } else {\n    sw <- swopen(outfile = file, template = template)\n    swlatex(sw,c(\"\\\\title{MAgPIE Validation}\",\"\\\\author{HAL 9000}\",\"\\\\maketitle\",\"\\\\tableofcontents\"))\n    on.exit(swclose(sw, clean_output=!debug, engine=\"knitr\"))\n  }\n  stats <- list()\n  for(l1 in levels(vars$level1)) {\n    cat(\"...\",l1,\"\\n\")\n    swlatex(sw,\"\\\\clearpage\")\n    swlatex(sw,paste0(\"\\\\part{\",prefix,l1,\"}\"))\n    vars1 <- droplevels(vars[vars$level1==l1,])\n    for(l2 in levels(vars1$level2)) {\n      if(l2!=\"\") {\n        cat(\"  ...\",l2,\"\\n\")\n        swlatex(sw,paste0(\"\\\\section{\",l2,\"}\"))\n      }\n      vars2 <- droplevels(vars1[vars1$level2==l2,])\n      for(l3 in levels(vars2$level3)) {\n        vars3 <- droplevels(vars2[vars2$level3==l3,])\n        stats <- hascontent(stats,x=x[x$fullname %in% levels(vars3$fullname),],hist=hist[hist$fullname %in% levels(vars3$fullname),])\n        if(!stats$hascontent) next\n        if(l3!=\"\") {\n          cat(\"    ...\",l3,\"\\n\")\n          swlatex(sw,paste0(\"\\\\subsection{\",l3,\"}\"))\n        }\n        for(l4 in levels(vars3$level4)) {\n          varname <- as.matrix(vars3[vars3$level4==l4,])\n          if(dim(varname)[1]>1) warnings(\"There seems to be a problem with the variable names. Use only first option!\")\n          varname <- varname[1,]\n          stats <- fillcontent(sw,x[x$fullname==varname[\"fullname\"],],hist[hist$fullname==varname[\"fullname\"],],varname, style, stats)\n        } \n      }\n    }\n  }\n  if(!is.null(stats$trafficlight) | length(xtrax)>0 | length(xtrahist)>0 | !is.null(stats$ignored_all0) ) {\n    swlatex(sw,\"\\\\clearpage\")\n    swlatex(sw,paste0(\"\\\\part{\",prefix,\"Statistics}\"))  \n    if(!is.null(stats$trafficlight)) {\n      swlatex(sw,\"\\\\section{Traffic Lights}\")\n      \n      tl      <- stats$trafficlight\n      \n      tlsummary <- function(tl) {\n        summary <- data.frame(green = sum(tl$value==2),\n                              yellow = sum(tl$value==1),\n                              red = sum(tl$value==0),\n                              \"NA\" = sum(tl$value==-1))\n        summary <- rbind(summary,round(summary/sum(summary),2))\n        rownames(summary) <- c(\"total\",\"relative\")\n        return(summary)  \n      }\n      \n      stats$summary <- list()\n      for(i in grep(\".\",levels(tl$Var2),fixed=TRUE,invert=TRUE,value=TRUE)) {\n        stats$summary[[i]] <- list(GLO=tlsummary(tl[tl$Var2==i & tl$Var1==\"GLO\",]),\n                                   REG=tlsummary(tl[tl$Var2==i & tl$Var1!=\"GLO\",]))\n        swlatex(sw,paste0(\"\\\\subsection{\",i,\"}\"))\n        tmp <-  stats$summary[[i]][[\"GLO\"]]\n        tmp[2,] <- paste0(tmp[2,]*100,\"%\")\n        swtable(sw,tmp, caption=\"Global\",table.placement=\"H\")\n        tmp <-  stats$summary[[i]][[\"REG\"]]\n        tmp[2,] <- paste0(tmp[2,]*100,\"%\")\n        swtable(sw,tmp, caption=\"Regional\",table.placement=\"H\")\n      }\n    }\n    if(!is.null(stats$ignored_all0)) {\n      swlatex(sw,\"\\\\section{Ignored data}\")\n      if(!is.null(stats$ignored_all0$x)) {\n        swlatex(sw,\"Data contains only a mix of 0 and NA values and is ignored.\")\n        swR(sw,cat,stats$ignored_all0$x,sep=\"\\n\")\n      }\n      if(!is.null(stats$ignored_all0$hist)) {\n        swlatex(sw,\"Validation data contains only a mix of 0 and NA values and is ignored.\")\n        swR(sw,cat,stats$ignored_all0$hist,sep=\"\\n\")\n      }\n    }\n    if(length(xtrax)>0 | length(xtrahist)>0) {\n      swlatex(sw,\"\\\\section{Non-Matching Data}\")\n      if(length(xtrax)>0) {\n        swlatex(sw,\"\\\\subsection{Model outputs}\")\n        swR(sw,cat,xtrax,sep=\"\\n\")\n      }\n      if(length(xtrahist)>0) {\n        swlatex(sw,\"\\\\subsection{Validation data}\")\n        swR(sw,cat,xtrahist,sep=\"\\n\")\n      }\n    }\n  }\n  \n  cat(\"Finished preparing data!\\n\")\n  return(stats)\n}\n",
    "created" : 1497441947055.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1798998023",
    "id" : "BAC4443C",
    "lastKnownWriteTime" : 1497361397,
    "last_content_update" : 1497361397,
    "path" : "~/Landuselibrary/mip/R/validationpdf.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}